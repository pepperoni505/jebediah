Index: gazebo_model_plugin_flashlight/gazebo_model_plugin_flashlight.cc
===================================================================
--- gazebo_model_plugin_flashlight.orig/gazebo_model_plugin_flashlight.cc
+++ gazebo_model_plugin_flashlight/gazebo_model_plugin_flashlight.cc
@@ -54,6 +54,9 @@ class GazeboModelPluginFlashlight : publ
   }
 
  protected:
+  // Light delay time[us]
+  int light_delay_time = 0.5 * 1000000;
+
   // Called when the plugin is loaded into the simulator
   void LoadCallback(ros::NodeHandle *nh,
     physics::ModelPtr model, sdf::ElementPtr sdf) {
@@ -164,6 +167,9 @@ class GazeboModelPluginFlashlight : publ
     #if GAZEBO_MAJOR_VERSION < 11
     msgs::Set(light_.mutable_diffuse(), common::Color(0.5, 0.5, 0.5, 1));
     msgs::Set(light_.mutable_specular(), common::Color(0.1, 0.1, 0.1, 1));
+    #else
+    msgs::Set(light_.mutable_diffuse(), ignition::math::Color(0.5, 0.5, 0.5, 0.1));
+    msgs::Set(light_.mutable_specular(), ignition::math::Color(0.1, 0.1, 0.1, 0.1));
     #endif
 
     #if GAZEBO_MAJOR_VERSION > 7
@@ -186,6 +192,8 @@ class GazeboModelPluginFlashlight : publ
   // Called when the laser needs to be toggled
   bool ToggleCallback(ff_hw_msgs::SetFlashlight::Request &req,
                       ff_hw_msgs::SetFlashlight::Response &res) {
+    // Light delay time
+    usleep(light_delay_time);
     // Update the alpha channel in rviz
     marker_.header.stamp = ros::Time::now();
     marker_.color.a = static_cast<double>(req.brightness) / 200.0;
@@ -238,3 +246,4 @@ class GazeboModelPluginFlashlight : publ
 GZ_REGISTER_MODEL_PLUGIN(GazeboModelPluginFlashlight )
 
 }   // namespace gazebo
+
